#include "imports/stdlib.fc";

const int ton_for_fee = 100000000;

(int, int, int, int, slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_uint(64), ds~load_uint(16), ds~load_uint(16), ds~load_uint(1), ds~load_msg_addr(), ds~load_msg_addr(), ds~load_dict());
}

() save_data(int seed, int length, int last_key, int initiated, slice admin, slice jetton_wallet, cell messages) impure inline {
    set_data(begin_cell()
        .store_uint(seed, 64)
        .store_uint(length, 16)
        .store_uint(last_key, 16)
        .store_uint(initiated, 1)
        .store_slice(admin)
        .store_slice(jetton_wallet)
        .store_dict(messages)
    .end_cell());
}

() send_jetton_transfer(slice dest, int value, slice comment, slice jetton_wallet) impure inline {
    ;;transfer#0f8a7ea5 query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress response_destination:MsgAddress custom_payload:(Maybe ^Cell) forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell) = InternalMsgBody;
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_wallet)
        .store_coins(50000000)
        .store_uint(0, 107)
        .store_uint(0x0f8a7ea5, 32)
        .store_uint(0, 64)
        .store_coins(value)
        .store_slice(dest)
        .store_uint(0, 3)
        .store_coins(1)
        .store_uint(1, 1)
        .store_ref(begin_cell()
            .store_uint(0, 32)
            .store_slice(comment)
        .end_cell())
    .end_cell(), 0);
}
() send_transfer(slice dest, int value, slice comment) impure inline {
    send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(dest)
        .store_coins(value)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
        .store_slice(comment)
    .end_cell(), 1);
}

() send_excesses(slice dest) impure inline {
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(dest)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
        .store_slice("Excesses")
    .end_cell(), 128);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender = cs~load_msg_addr();
    (int seed, int length, int last_key, int initiated, slice admin, slice jetton_wallet,  cell messages) = load_data();
    if (initiated == 0) {
        jetton_wallet = in_msg_body;
        throw_if(101, msg_value < ton_for_fee * (length + (length + 253) / 254));
        initiated = 1;
    } else {
        throw_unless(100, equal_slices(sender, my_address()) | equal_slices(sender, admin));
        accept_message();
    }

    (last_key, slice val, int f?) = messages.udict_get_next?(16, last_key);

    repeat (min(253, length)) {
        if (f?) {
            int value = val~load_coins();
            slice dest = val~load_msg_addr();
            send_jetton_transfer(dest, value, val, jetton_wallet);
            (last_key, val, f?) = messages.udict_get_next?(16, last_key);
        }
    }
    
    if (~ f?) {
        save_data(seed, 0, 0, initiated, admin, jetton_wallet, messages);
        send_excesses(admin);
    } else {
        save_data(seed, length - 253, last_key - 1, initiated, admin, jetton_wallet, messages);
        send_transfer(my_address(), ton_for_fee, "");
    }
}

(int) has_finished () method_id {
    (int seed, int length, int last_key, int initiated, slice admin, slice jetton_wallet, cell messages) = load_data();
    return (length == 0);
}
